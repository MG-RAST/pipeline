#!/usr/bin/env perl

use strict;
use warnings;

use DBI;
use Getopt::Long;

my $verbose = 0;
my $version = 7;
my $jobID   = '';
my $reload  = 0;
my $dbname  = "";
my $dbhost  = "";
my $dbuser  = "";
my %filenames = ( md5s       => "",
                  functions  => "",
                  organisms  => "",
                  ontologies => "",
                  lcas       => ""
                );

my $filenames_string = "";
foreach my $file_type (keys %filenames) {
  $filenames_string .= "  --$file_type\_filename\t\tsource data\tOptional.\n";
}

my $usage   = qq($0
load precomputed job data into database.

$filenames_string
  Note: At least 1 of the above filenames is Required.

  --job                  job id         Required.
  --seq-db-version       nr db version  Optional. Default is '$version'
  --dbhost               db user        Required. Server of database
  --dbname               db name        Required. Name of database
  --dbuser               db user        Required. Owner of database
  --verbose                             Optional. Verbose output.
  --reload                              Optional. Overwrite data if exists for job/version.

);

if ( (@ARGV > 0) && ($ARGV[0] =~ /-h/) ) { print STDERR $usage; exit 1; }

my %options = ( 'verbose!'         => \$verbose,
                'seq-db-version:i' => \$version,
                'job=i'            => \$jobID,
                'dbhost:s'         => \$dbhost,
                'dbname:s'         => \$dbname,
                'dbuser:s'         => \$dbuser,
                'reload!'          => \$reload
              );

foreach my $file_type (keys %filenames) {
  $options{$file_type."\_filename=s"} = \$filenames{$file_type};
}

if (! &GetOptions ( %options )) {
  print STDERR $usage;
  exit 1;
}

my $file_count = 0;
foreach my $file_type (keys %filenames) {
  if($filenames{$file_type}) {
    ++$file_count;
  }
}

unless ($file_count > 0 && $jobID && $dbhost && $dbname && $dbuser) {
  print STDERR $usage . "Missing parmater.\n"; exit 1;
}

my $dbh = DBI->connect("DBI:Pg:dbname=$dbname;host=$dbhost", $dbuser, '', {AutoCommit => 0 , RaiseError => 1});
unless ($dbh) { print STDERR "Error: ".DBI->errstr."\n"; exit 1; }

# Check if job-version combination already exists.
my $has_job = $dbh->selectcol_arrayref("SELECT count(*) FROM job_info WHERE job=$jobID AND version=$version");
$has_job = ($has_job && (@$has_job > 0)) ? $has_job->[0] : 0;

if ($has_job && (! $reload)) {
  print STDERR "Entry already exists in job_info for job=$jobID and version=$version, exiting.\n";
  exit 1;
} elsif ($has_job && $reload) {
  # Update row in job_info to loaded = false
  print "Updating job_info to loaded = false where job=$jobID and version=$version... " if ($verbose);
  $dbh->do("UPDATE job_info SET loaded = false WHERE job=$jobID AND version=$version");
  $dbh->commit;

  # Delete entries from job_* tables with this job and version
  foreach my $file_type (keys %filenames) {
    $dbh->do("DELETE FROM job_$file_type WHERE job=$jobID AND version=$version");
    print "Deleting from job_$file_type where job=$jobID and version=$version" if ($verbose);
  }
  
  # Load files into job_* tables
  foreach my $file_type (keys %filenames) {
    &insert_job_abundances($dbh, $file_type);
  }

  # Update row in job_info to loaded = true
  print "Updating job_info to loaded = true where job=$jobID and version=$version... " if ($verbose);
  $dbh->do("UPDATE job_info SET loaded = true WHERE job=$jobID AND version=$version");
} else {
  # Load files into job_* tables
  foreach my $file_type (keys %filenames) {
    &insert_job_abundances($dbh, $file_type);
  }

  # Insert row in job_info with loaded = true
  print "Inserting job=$jobID, version=$version and loaded=true into job_info table... " if ($verbose);
  $dbh->do("INSERT INTO job_info (version, job, loaded) VALUES ('$version', '$jobID', true)");
}
$dbh->commit;
print "Done.\n" if ($verbose);
$dbh->disconnect;
exit 0;

sub insert_job_abundances {
  my ($dbh, $file_type) = @_;

  my $table = "job_$file_type";
  my $filename = $filenames{$file_type};
  my ($num, $name, $end);
  my $copy_cmd = "COPY $table FROM STDIN WITH NULL AS ''";

  if ( open(DATA, "<$filename") ) {
    print "Running $copy_cmd ... " if ($verbose);
    $dbh->do($copy_cmd);
    while (my $line = <DATA>) {
      $dbh->pg_putcopydata($line) if $line;
    }
    my $res = $dbh->pg_putcopyend();
    unless ($res) {
      print STDERR "Error with COPY: ".DBI->errstr."\n"; exit 1;
    }
    close(DATA);
    print " Done\n" if ($verbose);
  } else {
    print STDERR "Error: can not read file $filename: $!\n"; exit 1;
  }
}
