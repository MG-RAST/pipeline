#!/usr/bin/env perl 

use strict;
use warnings;
no warnings('once');

use Pipeline;
use Pipeline_Conf;

use Getopt::Long;
use File::Copy;
use Data::Dumper;

# options
my $job_num = "";
my $pipeline_name = "";
my $pipeline = "";
my $qos = "";
my $queue = "batch";
my $option_string = "";
my $help = "";
my $options = GetOptions ("job=i"      => \$job_num,
			  "pipeline:s" => \$pipeline_name,
			  "qos:s"      => \$qos,
			  "queue:s"    => \$queue,
			  "options:s"  => \$option_string,
			  "help"       => \$help,
			 );

if ( $help or !($job_num)){
    print STDERR "Usage: submit_stages -j <job number> [-p <pipeline_name> -qos <quality of service, default [medium for 'batch', slow otherwise]> -queue <queue name, default: $queue> -o <options>]\n";
    exit(1);
}

my $log = Pipeline::logger($job_num);
if ($pipeline_name eq "") {
  $pipeline_name = "default";
}

my $fq_size   = (-e $Pipeline_Conf::global_job_dir."/".$job_num."/raw/".$job_num.".fastq") ? -s $Pipeline_Conf::global_job_dir."/".$job_num."/raw/".$job_num.".fastq" : 0;
my $fa_size   = (-e $Pipeline_Conf::global_job_dir."/".$job_num."/raw/".$job_num.".fna") ? -s $Pipeline_Conf::global_job_dir."/".$job_num."/raw/".$job_num.".fna" : 0;
my $file_size = ($fa_size > 0) ? $fa_size : int($fq_size / 2);

if (($pipeline_name eq "default") && $file_size && ($file_size > 1073741824)) {
  $pipeline_name = "large_job";
  $log->info("Job $job_num has raw file of size $file_size, using 'large_job' pipeline");
}

if ($qos eq "urgent") {
  $qos = " -W x=QOS:1";
} elsif ($qos eq "fast") {
  $qos = " -W x=QOS:2";
} elsif ($qos eq "slow") {
  $qos = " -W x=QOS:3";
} elsif ($queue eq "batch") {
  ## default for batch pipeline
  $qos = " -W x=QOS:2";
} elsif ($queue eq "fast") {
  $qos = "";
}  else {
  ## default for other pipelines
  $qos = " -W x=QOS:3";
}

my $job_dir = $Pipeline_Conf::global_job_dir."/".$job_num;

sub fail {
    my ($log, $message) = @_;
    $log->error($message);
    exit(1);
}

my $pipelines = $Pipeline_Conf::pipeline;

unless (exists $pipelines->{$pipeline_name}){
    $log->error("pipeline: $pipeline_name not defined");
    exit(1);
} else {
    $pipeline = $pipelines->{$pipeline_name};
}

my $options_hash = {};
unless ($option_string) {
  $option_string = Pipeline::get_job_options($job_num);
}
if ($option_string) {
  foreach my $set ( split("&", $option_string) ) {
    my ($opt, $val) = split("=", $set, 2);
    $options_hash->{$opt} = $val;
  }
}

# get user or default options into args string
for my $s (@{$pipeline}) {
  $s->{args} =~ s/<job_num>/$job_num/g;
  $s->{args} =~ s/<job_dir>/$job_dir/g;

  my @opts = ();
  while ( $s->{args} =~ /<(\S+)>/g ) {
    push @opts, $1;
  }
  foreach my $o (@opts) {
    if (exists $options_hash->{$o}) {
      $s->{args} =~ s/<$o>/$options_hash->{$o}/;
    } else {
      $s->{args} =~ s/<$o>/$s->{$o}/;
    }
  }
}

my $stage_tid = {};
my $stage_names = {};
for my $stage (@{$pipeline}) {
  $stage_names->{$stage->{name}} = 1;
}
for my $stage (@{$pipeline}) {
  if(defined $stage->{requires} and scalar @{$stage->{requires}}) {
    foreach my $req (@{$stage->{requires}}) {
      unless(exists $stage_names->{$req}) {
        print STDERR "ERROR, required stage does not exist: $req\n";
        print STDERR "Exiting.\n";
        exit(1);
      }
    }
  }
}

sub_pipeline($pipeline, $stage_tid);

#$log->info("Successfully submitted stages for job: $job_num to cluster");
exit(0);

sub sub_pipeline {
  my ($stages, $stage_tid) = (shift, shift);
  my $pass = [];
  my $stage_dir = $Pipeline_Conf::global_dir."/pipeline/stages";
  my $torque_options = $Pipeline_Conf::torque_options;
  
  for my $s (@{$stages}) {  
    my @reqs = ();
    my $skip = 0; 
    if(defined $s->{requires} and scalar @{$s->{requires}}){
      for my $r (@{$s->{requires}}){
		if(exists $stage_tid->{$r}){
		  for my $id (@{$stage_tid->{$r}}){
			push @reqs, $id;
		  }
		} else {
		  unless($skip){
			push @{$pass}, $s;
			$skip = 1;
		  }
		}
      }
    }
    next if($skip);

    my $req_string = "";    
    if(scalar @reqs){
      $req_string = "-W depend=afterok";
      for (@reqs){
		$req_string .= ":".$_;
      }
    }

	my $qsub_options = "-l nodes=".($s->{nodes} || 1).":ppn=".($s->{ppn} || 1)." -l walltime=".($s->{walltime} || "0:120:00")." ".(($s->{qsub_options}) ? $torque_options." ".$s->{qsub_options} : $torque_options )." -q ".$queue.$qos." -N ".$job_num.".".$s->{name};
    my $out = Pipeline::submit_stage([$s->{script}, $s->{args}, $qsub_options." ".$req_string]);
    if ($out->[0] eq "ERROR") {
      $log->error($out->[1]);
      exit(1);
    } elsif ($out->[0] eq "SUCCESS") {
	  if (defined $stage_tid->{$s->{name}}) {
		push @{$stage_tid->{$s->{name}}}, $out->[1];
	  } else {
		$stage_tid->{$s->{name}} = [$out->[1]];
	  }
	  if (exists($s->{setspri}) && ($s->{setspri} > 0)) {
	    Pipeline::setspri($out->[1], $s->{setspri});
	  }
      #$log->info("Submitted stage: $s->{name} torque id: $out->[1]");
    }
  }

  if(scalar @{$pass}){
    sub_pipeline($pass, $stage_tid);
  }  
}
