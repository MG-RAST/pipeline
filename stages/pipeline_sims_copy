#!/usr/bin/env perl 

use strict;
use warnings;
no warnings('once');

use Pipeline;
use Pipeline_Conf;

use Getopt::Long;
use File::Copy;
use File::Basename;
use POSIX qw(strftime);
umask 000;

my $stage_name="sims_copy";
my $stage_id = 650;
my $revision = "0";
my $version  = $Pipeline_Conf::pipeline_version.".".$revision;

# options
my $job_num = "";
my $fasta   = "";
my $sims    = "";
my $ver     = "";
my $help    = "";
my $options = GetOptions ("job=i"    => \$job_num,
			  "fasta=s"  => \$fasta,
			  "sims:s"   => \$sims,
			  "version!" => \$ver,
			  "help!"    => \$help,
			 );

if ( $ver ) {
  print STDERR "$stage_name - $version - $stage_id\n";
  exit(0);
} elsif ( $help or !($job_num and $fasta) ) {
  print STDERR "Usage: pipeline_$stage_name -j <job number> -f <fasta file> [-s <sims file>]\n";
  exit(1);
} 

my $log = Pipeline::logger($job_num);

unless (-e $fasta) {
  $log->error("file: $fasta does not exist");
  exit(1);
}

$log->info("Starting $stage_name on job: $job_num");

# update jobcache stage status
Pipeline::update_stage_info($job_num, $stage_name, "running");

my $job_dir     = $Pipeline_Conf::global_job_dir."/".$job_num;
my $proc_dir    = $job_dir."/proc";
my $stage_dir   = $proc_dir."/".$stage_id.".".$stage_name;
my $results_dir = $job_dir."/".$Pipeline_Conf::results_dir;
my $hostname    = `hostname`;
chomp $hostname;

# create directories
if (-d $stage_dir) {
  my $t = time;
  $log->info("found $stage_dir, moving to $stage_dir.$t");
  move($stage_dir, $stage_dir.".".$t) or fail($log, "$!");
}
mkdir($stage_dir) or fail($log, "Could not mkdir: $stage_dir, $!");

system("echo $hostname > $stage_dir/hostname");
$log->info("Running on host $hostname, using dir $stage_dir");

my $prefix   = $stage_id.".superblat";
my $err_file = $stage_dir."/".$prefix.".err";
my $message  = "$stage_name failed on job: $job_num, see $err_file for details.";

if ((-s $fasta) < $Pipeline_Conf::min_gene_size) {
  quit_sims($job_num, $stage_id, $stage_name, "no genes called");
}

# get AWE results
my $sims_file = "$results_dir/$prefix.sims";
unless ($sims && (-e $sims)) {
  my $awe_results_dir = $Pipeline_Conf::AWEdata."/".$job_num.".results";
  unless (-d $awe_results_dir) {
    quit_sims($job_num, $stage_id, $stage_name, "no AWE results");
  }
  system("cat $awe_results_dir/* > $sims_file") == 0 or fail($log, 'AWE cat: '.$message);
  unless (-s $sims_file) {
    quit_sims($job_num, $stage_id, $stage_name, "no sims found");
  }
}
else {
  if ((-s $sims) < $Pipeline_Conf::min_gene_size) {
    quit_sims($job_num, $stage_id, $stage_name, "no sims found");
  }
  system("cp $sims $sims_file") == 0 or fail($log, 'cp $sims: '.$message);
}

chmod 0666, "$sims_file";
$log->info("Finished $stage_name on job: $job_num");

# update jobcache stage status
Pipeline::update_stage_info($job_num, $stage_name, "completed");

exit(0);

sub fail {
  my ($log, $message) = @_;
  Pipeline::update_stage_info($job_num, $stage_name, "error");
  $log->error($message);
  exit(1);
}

sub quit_sims {
  my ($job_num, $stage_id, $stage_name, $msg) = @_;

  my $results_dir = $job_dir."/".$Pipeline_Conf::results_dir;
  my $prefix = $stage_id.".superblat";

  system("touch $results_dir/$prefix.sims");
  chmod 0666, "$results_dir/$prefix.sims";

  $log->info("Finished $stage_name on job: $job_num, empty results files: $msg");
  Pipeline::update_stage_info($job_num, $stage_name, "completed");
  exit(0);
}
