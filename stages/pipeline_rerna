#!/usr/bin/env perl 

use strict;
use warnings;
no warnings('once');

use Pipeline;
use Pipeline_Conf;

use Getopt::Long;
use File::Copy;
umask 000;

my $stage_name = "rna";
my $revision = "0";
my $stage_id = '450';
my $version  = $Pipeline_Conf::pipeline_version.".".$revision;
my $default_nr = $Pipeline_Conf::md5rna_full;

# options
my $job_num = "";
my $fasta   = "";
my $rna_nr  = "";
my $ver     = 0;
my $help    = 0;
my $options = GetOptions ("job=i"     => \$job_num,
			  "fasta=s"   => \$fasta,
			  "rna_nr=s"  => \$rna_nr,
			  "version!"  => \$ver,
			  "help!"     => \$help,
			 );
if ( $ver ) {
  print STDERR "$stage_name - $version - $stage_id\n";
  exit(0);
} elsif ( $help or !($job_num and $fasta and $rna_nr) ) {
  print STDERR "Usage: pipeline_$stage_name -j <job number> -f <fasta file> -r <rna NR>\n";
  exit(1);
}

my $log = Pipeline::logger($job_num);
$log->info("Starting $stage_name on job: $job_num");

unless ($rna_nr && (-e $rna_nr)) {
  $rna_nr = $default_nr;
  $log->info("changing rna_nr to $default_nr");
}
unless ((-e $fasta) && (-e $rna_nr)) {
  $log->error("file: $fasta or $rna_nr does not exist");
  exit(1);
}

# update jobcache stage status
Pipeline::update_stage_info($job_num, $stage_name, "running");

my $job_dir     = $Pipeline_Conf::global_job_dir."/".$job_num;
my $proc_dir    = $job_dir."/proc";
my $stage_dir   = $proc_dir."/".$stage_id.".".$stage_name;
my $results_dir = $job_dir."/".$Pipeline_Conf::results_dir;
my $run_dir     = $stage_dir;
my $hostname    = `hostname`;
chomp $hostname;

# create directories
if (-d $stage_dir) {
  my $t = time;
  $log->info("found $stage_dir, moving to $stage_dir.$t");
  move($stage_dir, $stage_dir.".".$t) or fail($log, "$!");
}
mkdir($stage_dir) or fail($log, "Could not mkdir: $stage_dir, $!");

# set cluster workspace dir (use local if large job)
if (-d $Pipeline_Conf::cluster_workspace) {
  $run_dir = $Pipeline_Conf::cluster_workspace."/$job_num.$stage_id.$stage_name";
  if (-d $run_dir) {
    system("rm -rf $run_dir");
  }
  mkdir($run_dir) or fail($log, "Could not mkdir: $run_dir, $!");
  system("echo $hostname > $stage_dir/hostname");
}
$log->info("Running on host $hostname, using dir $run_dir");

my $prefix   = $stage_id.".".$stage_name;
my $err_file = $stage_dir."/".$prefix.".err";
my $message  = "$stage_name failed on job: $job_num, see $err_file for details.";

# run blat / bleach
my $fasta_file = "$run_dir/$prefix.fna";
my $sims_file  = "$run_dir/$prefix.sims";
system("cp $fasta $fasta_file") == 0 or fail($log, "cp $fasta: ".$message);
system("blat -out=blast8 -t=dna -q=dna -fastMap $rna_nr $fasta_file stdout | bleachsims -s - -o $sims_file -r 0 > $run_dir/blat.out 2> $err_file") == 0 or fail($log, "blat: ".$message);

# new sims calculated, add m5rna version to JobAttributes
load_data($job_num, [['m5rna_sims_version', $Pipeline_Conf::ach_sequence_ver]], $prefix);

# run stats on cluster file
my @proc_rna_tags = grep { $_ =~ /_processed_rna$/ } @{ Pipeline::get_job_stat_tags() };
my $clust = $results_dir."/".$Pipeline::cluster_map_rna;
if (-s $clust) {
  my $c_num = 0;
  my $c_seq = 0;
  
  open(CLUST, "<$clust") or fail($log, "$stage_name failed on job: $job_num, can not open $clust: $!");
  while (my $line = <CLUST>) {
    chomp $line;
    my @tabs = split(/\t/, $line);
    $c_seq += scalar( split(/,/, $tabs[2]) ) + 1;
    $c_num += 1;
  }
  close CLUST;

  open(CSTAT, ">$clust.stats") or fail($log, "$stage_name failed on job: $job_num, can not open $clust.stats: $!");
  print CSTAT "cluster_count\t$c_num\nclustered_sequence_count\t$c_seq\n";
  close CSTAT;
  load_fasta_stats($job_num, $clust, $clust.".stats", \@proc_rna_tags, "processed_rna", $prefix);
}

# load processed rna stats
my $proc_rna_file = (-s $results_dir."/".$Pipeline::processed_fasta_rna_1) ? $Pipeline::processed_fasta_rna_1 : $Pipeline::processed_fasta_rna_2;
load_fasta_stats($job_num, $results_dir."/".$proc_rna_file, $results_dir."/".$proc_rna_file.".stats", \@proc_rna_tags, "processed_rna", $prefix);
my $rna_pred  = $results_dir."/".$Pipeline::processed_fasta_rna_2.".stats";
my $rna_reads = '0';
if (-s $rna_reads) {
  $rna_reads = `grep -w sequence_count $rna_pred | cut -f2`;
  chomp $rna_reads;
}
load_stats($job_num, [['read_count_processed_rna', $rna_reads]], $prefix);

# cleanup
move($sims_file, "$results_dir/$prefix.sims") or fail($log, "Failed copy: $prefix.sims - $!");
chmod 0666, "$results_dir/$prefix.sims";
if ($run_dir ne $stage_dir) {
  system("mv $run_dir/*.out $stage_dir/.");
  system("mv $run_dir/*.err $stage_dir/.");
  system("rm -rf $run_dir") == 0 or fail($log, "$stage_name failed on job: $job_num, can not remove $run_dir");
} else {
  my @run_files = `ls $run_dir`;
  chomp @run_files;
  map { system("rm $run_dir/$_") } grep { $_ !~ /\.(out|err)$/ } @run_files;
}

$log->info("Finished $stage_name on job: $job_num");

# update jobcache stage status
Pipeline::update_stage_info($job_num, $stage_name, "completed");

exit(0);

sub fail {
  my ($log, $message) = @_;
  Pipeline::update_stage_info($job_num, $stage_name, "error");
  $log->error($message);
  if ($run_dir ne $stage_dir) {
    system("mv $run_dir/* $stage_dir/.");
    system("rmdir $run_dir");
  }
  exit(1);
}

sub load_fasta_stats {
  my ($job_num, $fasta_file, $stats_file, $tags, $step, $prefix) = @_;

  unless (-s $fasta_file) {
    $log->info("Skipping loading stats for stage '$step', $fasta_file is empty");
    return;
  }
  unless (-s $stats_file) {
    fail($log, "$stage_name failed on job: $job_num, missing file: $stats_file");
  }
  my @stats = `cat $stats_file`;
  chomp @stats;
  if ( $stats[0] =~ /^ERROR/i ) {
    fail($log, "$stage_name failed on job: $job_num, bad stats $stats_file: $stats[0]");
  }

  my @data = ();
  my %tmap = map { $_, 1 } @$tags;
  foreach my $set (@stats) {
    my ($tag, $val) = split(/\t/, $set);
    my $jtag = $step ? $tag.'_'.$step : $tag;
    if (exists $tmap{$jtag}) {
      push @data, [$jtag, $val];
    }
  }
  load_stats($job_num, \@data, $prefix);
}

sub load_stats {
  my ($job_num, $stats, $prefix) = @_;
  my $res = Pipeline::set_job_statistics($job_num, $stats, $prefix);
  unless ($res) {
    fail($log, "$stage_name failed on job: $job_num, loading JobDB stats");
  }  
}

sub load_data {
  my ($job_num, $data, $prefix) = @_;
  my $res = Pipeline::set_job_attributes($job_num, $data, $prefix);
  unless ($res) {
    fail($log, "$stage_name failed on job: $job_num, loading JobDB data");
  }  
}
