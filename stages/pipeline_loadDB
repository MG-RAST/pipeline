#!/usr/bin/env perl 

use strict;
use warnings;
no warnings('once');

use Pipeline;
use Pipeline_Conf;

use Getopt::Long;
use File::Copy;
umask 000;

my $stage_name="loadDB";
my $stage;
for my $s (@{$Pipeline_Conf::pipeline->{'default'}}){
  $stage = $s if $s->{name} eq $stage_name; 
}
my $stage_id = $stage->{id};
my $revision = "0";
my $version  = $Pipeline_Conf::pipeline_version.".".$revision;
my $prot_ext = ['sims.filter', 'expand.protein', 'expand.lca', 'expand.ontology'];
my $rna_ext  = ['sims.filter', 'expand.rna', 'expand.lca'];

# options
my $max_seq = 500000;
my $job_num = "";
my $fasta   = "";
my $prot_prefix = "";
my $rna_prefix  = "";
my $db_reload   = 0;
my $clust_aa = "";
my $map_rna  = "";
my $nodes    = 4;
my $sort_mem = 2;
my $ver_db   = $Pipeline_Conf::ach_annotation_ver;
my $ver      = "";
my $help     = "";
my $options  = GetOptions ("job=i" => \$job_num,
			   "fasta=s" => \$fasta,
			   "protein_prefix=s" => \$prot_prefix,
			   "rna_prefix=s" => \$rna_prefix,
			   "clust_aa=s" => \$clust_aa,
			   "map_rna=s" => \$map_rna,
			   "nodes:i" => \$nodes,
			   "smem:f" => \$sort_mem,
			   "ver_db:s" => \$ver_db,
			   "db_reload!" => \$db_reload,
			   "version!" => \$ver,
			   "help!" => \$help,
			  );
if ( $ver ) {
  print STDERR "$stage_name - $version\n";
  exit(0);
} elsif ( $help or !($job_num and $fasta and ($prot_prefix or $rna_prefix)) ) {
  print STDERR "Usage: pipeline_$stage_name -j <job number> -f <fasta file> [-p <protein prefix> -r <rna prefix> -c <cluster file, aa> -m <map file, rna> -n <node # (default $nodes)> -s <sort memory in GB (default $sort_mem)> -d (boolean: reload db) --ver_db <db version>]\n";
  exit(1);
}

my $log = Pipeline::logger($job_num);

unless ($fasta && (-s $fasta)) {
  fail($log, "file: $fasta does not exist or is empty");
}
foreach my $e (@$prot_ext) {
  if ($prot_prefix && (! -e "$prot_prefix.$e")) { fail($log, "file: $prot_prefix.$e does not exist"); }
}
foreach my $e (@$rna_ext) {
  if ($rna_prefix && (! -e "$rna_prefix.$e")) { fail($log, "file: $rna_prefix.$e does not exist"); }
}
if ($nodes < 1) { $nodes = 1; }
if ($nodes > 8) { $nodes = 8; }

$log->info("Starting $stage_name on job: $job_num");

# update jobcache stage status
Pipeline::update_stage_info($job_num, $stage_name, "running");

my $job_dir		= $Pipeline_Conf::global_job_dir."/".$job_num;
my $raw_dir		= $job_dir."/raw";
my $proc_dir		= $job_dir."/proc";
my $stage_dir		= $proc_dir."/".$stage_id.".".$stage_name;
my $results_dir		= $job_dir."/".$Pipeline_Conf::results_dir;
my $run_dir		= $stage_dir;
my $params		= "--verbose --seq-db-version ".$ver_db;
my $index_sims_params	= "--verbose --mem_host ".$Pipeline_Conf::memcache_host." --mem_key ".$Pipeline_Conf::memcache_key;
my $dboptions		= "--dbhost ".$Pipeline_Conf::analysis_host." --dbname ".$Pipeline_Conf::analysis_db." --dbuser ".$Pipeline_Conf::analysis_user;
my $hostname		= `hostname`;

chomp $hostname;

# create directories
if (-d $stage_dir) {
  my $t = time;
  $log->info("found $stage_dir, moving to $stage_dir.$t");
  move($stage_dir, $stage_dir.".".$t) or fail($log, "$!");
}
mkdir($stage_dir) or fail($log, "Could not mkdir: $stage_dir, $!");

# set cluster workspace dir (use local if large job)
my $work_dir = (($nodes > 4) && (-d $Pipeline_Conf::local_workspace)) ? $Pipeline_Conf::local_workspace : $Pipeline_Conf::cluster_workspace;
if (-d $work_dir) {
  $run_dir = "$work_dir/$job_num.$stage_id.$stage_name";
  if (-d $run_dir) {
    system("rm -rf $run_dir");
  }
  mkdir($run_dir) or fail($log, "Could not mkdir: $run_dir, $!");
  system("echo $hostname > $stage_dir/hostname");
}
$log->info("Running on host $hostname, using dir $run_dir");

my $sort_dir = (-d $Pipeline_Conf::local_tmp) ? $Pipeline_Conf::local_tmp : ((-d $Pipeline_Conf::cluster_tmp) ? $Pipeline_Conf::cluster_tmp : $run_dir);
my $prefix   = $stage_id.".".$stage_name;
my $err_file = $stage_dir."/".$prefix.".err";
my $message  = "$stage_name failed on job: $job_num, see $err_file for details.";

# get merged files
my $cluster_file = "$run_dir/$prefix.mapping";
my $sims_filter  = "$run_dir/$prefix.sims.filter";
my $md5_expand   = "$run_dir/$prefix.expand";
my $lca_expand   = "$run_dir/$prefix.lca";
my $ontol_expand = "$run_dir/$prefix.ontology";
my $src_expand   = "$run_dir/$prefix.source";
my $abun_file    = "$run_dir/$prefix.abundance";
my @info_set     = ( ['md5', $md5_expand, 1],
		     ['function', $md5_expand, 6],
		     ['organism', $md5_expand, 7],
		     ['ontology', $ontol_expand, 7],
		     ['lca', $lca_expand, 6] );

if ($prot_prefix && $rna_prefix) {
  system("cat $prot_prefix.".$prot_ext->[0]." $rna_prefix.".$rna_ext->[0]." > $sims_filter") == 0 or fail($log, 'cat: '.$message);
  system("cat $prot_prefix.".$prot_ext->[1]." $rna_prefix.".$rna_ext->[1]." > $md5_expand")  == 0 or fail($log, 'cat: '.$message);
  system("cat $prot_prefix.".$prot_ext->[2]." $rna_prefix.".$rna_ext->[2]." > $lca_expand")  == 0 or fail($log, 'cat: '.$message);
  system("cp $prot_prefix.".$prot_ext->[3]." $ontol_expand") == 0 or fail($log, 'cp: '.$message);
  if ($clust_aa && (-s $clust_aa) && $map_rna && (-s $map_rna)) {
    system("cat $clust_aa $map_rna > $cluster_file") == 0 or fail($log, 'cat: '.$message);
  }
  elsif ($clust_aa && (-s $clust_aa)) {
    system("cp $clust_aa $cluster_file") == 0 or fail($log, 'cp: '.$message);
  }
  elsif ($map_rna && (-s $map_rna)) {
    system("cp $map_rna $cluster_file") == 0 or fail($log, 'cp: '.$message);
  }
}
elsif ($prot_prefix && (! $rna_prefix)) {
  system("cp $prot_prefix.".$prot_ext->[0]." $sims_filter")  == 0 or fail($log, 'cp: '.$message);
  system("cp $prot_prefix.".$prot_ext->[1]." $md5_expand")   == 0 or fail($log, 'cp: '.$message);
  system("cp $prot_prefix.".$prot_ext->[2]." $lca_expand")   == 0 or fail($log, 'cp: '.$message);
  system("cp $prot_prefix.".$prot_ext->[3]." $ontol_expand") == 0 or fail($log, 'cp: '.$message);
  if ($clust_aa && (-s $clust_aa)) {
    system("cp $clust_aa $cluster_file") == 0 or fail($log, 'cp: '.$message);
  }
}
elsif ($rna_prefix && (! $prot_prefix)) {
  system("cp $rna_prefix.".$rna_ext->[0]." $sims_filter") == 0 or fail($log, 'cp: '.$message);
  system("cp $rna_prefix.".$rna_ext->[1]." $md5_expand")  == 0 or fail($log, 'cp: '.$message);
  system("cp $rna_prefix.".$rna_ext->[2]." $lca_expand")  == 0 or fail($log, 'cp: '.$message);
  if ($map_rna && (-s $map_rna)) {
    system("cp $map_rna $cluster_file") == 0 or fail($log, 'cp: '.$message);
  }
}
else {
  fail($log, "missing input files");
}

unless ((-s $sims_filter) && (-s $md5_expand)) {
  fail($log, "file: $sims_filter or $md5_expand is empty");
}

my $outf  = "$run_dir/filter_sims.out";
$sort_mem = int($sort_mem * 1024 * $nodes);

# get max seq size
my $format = ($fasta =~ /\.(fq|fastq)$/) ? 'fastq' : 'fasta';
my @out    = `seq_length_stats.py -f -t $format -i $fasta | cut -f2`;
chomp @out;
my $max = $out[5];

# index filter seqs
system("uncluster_sims -v -c $cluster_file -i $sims_filter -o $sims_filter.unclust >> $run_dir/uncluster_sims.out 2> $err_file") == 0 or fail($log, 'uncluster_sims: '.$message);
if ($max < $max_seq) {
  my $seq_opt = ($format eq 'fastq') ? '--fastq' : '';
  system("seqUtil -t $sort_dir -i $fasta -o $run_dir/$prefix.seq.tab --sortbyid2tab $seq_opt >> $outf 2> $err_file") == 0 or fail($log, 'seqUtil sortbyid2tab: '.$message);
  system("/soft/packages/coreutils/8.13/alias/sort -T $sort_dir -S ${sort_mem}M -t \$'\\t' -k 1,1 -o $sims_filter.sort $sims_filter.unclust >> $outf 2> $err_file") == 0 or fail($log, "sort sims-query: ".$message);
  system("add_seq2sims -v -i $sims_filter.sort -o $sims_filter.seq -s $run_dir/$prefix.seq.tab >> $outf 2> $err_file") == 0 or fail($log, 'add_seq2sims: '.$message);
  system("/soft/packages/coreutils/8.13/alias/sort -T $sort_dir -S ${sort_mem}M -t \$'\\t' -k 2,2 -o $sims_filter.seq.sort $sims_filter.seq >> $outf 2> $err_file") == 0 or fail($log, "sort sims-md5: ".$message);
  system("mv $sims_filter.seq.sort $sims_filter.seq") == 0 or fail($log, 'mv: '.$message);
  system("index_sims_file_md5 $index_sims_params --in_file $sims_filter.seq --out_file $sims_filter.seq.index >> $outf 2> $err_file") == 0 or fail($log, "index_sims_file_md5: ".$message);
  system("rm $run_dir/$prefix.seq.tab $sims_filter.sort");
}
else {
  $log->info("Skipping adding of sequences to index sims file, max sequence length is $max bps");
  system("/soft/packages/coreutils/8.13/alias/sort -T $sort_dir -S ${sort_mem}M -t \$'\\t' -k 2,2 -o $sims_filter.seq $sims_filter.unclust >> $outf 2> $err_file") == 0 or fail($log, "sort sims-md5: ".$message);
}
system("rm $sims_filter.unclust");

# sort and load files: md5, function, organism, ontology, lca
my $reload = "";
if ($db_reload) {
  $reload = "--reload";
  $log->info("running in db reload mode");
}

# find out if this is an assembled dataset
my $job_attribs = Pipeline::get_job_attributes($job_num);
my $assembled = exists($job_attribs->{assembled}) ? $job_attribs->{assembled} : '';
my $abundance_option = "";
if ($assembled && $assembled == 1) {
  system("cp $raw_dir/$job_num.abundance $abun_file") == 0 or fail($log, 'cp: '.$message);
  $abundance_option = "--abundance_file $abun_file";
}

my $summary_file_options = "";
my %pluralize = ( 'md5' => 'md5s', 'function' => 'functions', 'organism' => 'organisms', 'ontology' => 'ontologies', 'lca' => 'lcas' );
foreach my $info (@info_set) {
  my ($type, $input, $pos) = @$info;
  my $sort_type = ($type eq 'lca') ? '' : '-n';
  unless ($input && (-s $input)) { next; }
  $outf = "$run_dir/run_$type.out";
  system("/soft/packages/coreutils/8.13/alias/sort -T $sort_dir -S ${sort_mem}M -t \$'\\t' -k $pos,$pos $sort_type -o $input.$type $input >> $outf 2> $err_file") == 0 or fail($log, "sort $type: ".$message);
  system("expanded_sims2overview $abundance_option --job $job_num --m5nr-version $ver_db --verbose --option $type --md5_index $sims_filter.seq.index --cluster $cluster_file --expanded_sims_in $input.$type --summary_sims_out $input.$type.summary >> $outf 2> $err_file") == 0 or fail($log, "expanded_sims2overview $type: ".$message);
  $summary_file_options .= "--$pluralize{$type}_filename $input.$type.summary ";
  # clean tmp file
  system("rm $input.$type");
}

$outf = "$run_dir/run_load_summary.out";
system("load_summary2db $params $dboptions $summary_file_options $reload --job $job_num >> $outf 2> $err_file") == 0 or fail($log, "load_summary2db ".$message);

foreach my $info (@info_set) {
  my ($type, $input, $pos) = @$info;
  # clean tmp file
  system("rm $input.$type.summary");
}

# process sources
my $type = "source";
$outf = "$run_dir/run_$type.out";
if ($ontol_expand && (-s $ontol_expand)) {
  system("cat $md5_expand $ontol_expand | /soft/packages/coreutils/8.13/alias/sort -T $sort_dir -S ${sort_mem}M -t \$'\\t' -k 8,8 -n -o $src_expand >> $outf 2> $err_file") == 0 or fail($log, "sort $type: ".$message);
} else {
  system("/soft/packages/coreutils/8.13/alias/sort -T $sort_dir -S ${sort_mem}M -t \$'\\t' -k 8,8 -n -o $src_expand $md5_expand >> $outf 2> $err_file") == 0 or fail($log, "sort $type: ".$message);
}
system("expanded_sims2overview $abundance_option --job $job_num --m5nr-version $ver_db --verbose --option $type --cluster $cluster_file --expanded_sims_in $src_expand --summary_sims_out $run_dir/$prefix.$type.stats.tmp >> $outf 2> $err_file") == 0 or fail($log, "expanded_sims2overview $type: ".$message);

my $src_map = Pipeline::get_source_map();
open(SRCF, ">$run_dir/$prefix.$type.stats");
foreach my $line (`cat $run_dir/$prefix.$type.stats.tmp`) {
    chomp $line;
    my @parts = split(/\t/, $line);
    if (exists $src_map->{$parts[0]}) {
        print SRCF $src_map->{$parts[0]}."\t".join("\t", @parts[1..-1])."\n";
    }
}
close(SRCF);

# new annotations loaded, add version to JobAttributes
Pipeline::set_job_attributes($job_num, [['m5nr_annotation_version', $ver_db]]);
Pipeline::set_job_attributes($job_num, [['m5rna_annotation_version', $ver_db]]);

# move files / cleanup
move("$run_dir/$prefix.source.stats", "$results_dir/$prefix.source.stats") or fail($log, "Failed copy: $prefix.source.stats - $!");
move("$sims_filter.seq", "$results_dir/$prefix.sims.filter.seq") or fail($log, "Failed copy: $sims_filter.seq - $!");
chmod 0666, "$results_dir/$prefix.source.stats";
chmod 0666, "$results_dir/$prefix.sims.filter.seq";

# move run_dir to stage_dir if on local
if ($run_dir ne $stage_dir) {
  system("mv $run_dir/*.out $stage_dir/.");
  system("mv $run_dir/*.err $stage_dir/.");
  system("rm -rf $run_dir") == 0 or fail($log, "$stage_name failed on job: $job_num, can not remove $run_dir");
} else {
  my @run_files = `ls $run_dir`;
  chomp @run_files;
  map { system("rm $run_dir/$_") } grep { $_ !~ /\.(out|err)$/ } @run_files;
}

$log->info("Finished $stage_name on job: $job_num");

# update jobcache stage status
Pipeline::update_stage_info($job_num, $stage_name, "completed");

exit(0);

sub fail {
  my ($log, $message) = @_;
  Pipeline::update_stage_info($job_num, $stage_name, "error");
  $log->error($message);
  if ($run_dir ne $stage_dir) {
    system("mv $run_dir/* $stage_dir/.");
    system("rmdir $run_dir");
  }
  exit(1);
}
