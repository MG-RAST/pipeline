#!/usr/bin/env perl 

use strict;
use warnings;
no warnings('once');

use Pipeline;
use Pipeline_Conf;

use Getopt::Long;
use File::Copy;
use POSIX qw(strftime);
umask 000;

my $stage_name="loadAWE_recompute";
my $stage;
for my $s (@{$Pipeline_Conf::pipeline->{'default'}}){
  $stage = $s if $s->{name} eq $stage_name; 
}
my $stage_id = $stage->{id};

my $revision = "0";
my $version = $Pipeline_Conf::pipeline_version.".".$revision;
my $runcmd="AWEUtil";

# options
my $job_num = "";
my $fasta_file = "";
my $ver = "";
my $help = "";
my $options = GetOptions ("job=i" => \$job_num,
			  "fasta=s"=> \$fasta_file,
			  "version" => \$ver,
			  "help" => \$help,
			 );
if ( $ver ) {
  print STDERR "pipeline_$stage_name - $version\n";
  exit(0);
} elsif ( $help or !($job_num and $fasta_file)){
  print STDERR "Usage: pipeline_$stage_name -j <job number> -f <fasta file>\n";
  exit(1);
} 

my $log = Pipeline::logger($job_num);

my $gzipped = 0;
unless (-e $fasta_file){
  if (-e $fasta_file.".gz"){
    system("gunzip $fasta_file.gz") == 0 or fail($log, "gunzip $fasta_file.gz failed: $!");
    $gzipped = 1;
  } else {
    $log->error("file: $fasta_file does not exist");
    exit(1);
  }
}

sub fail {
  my ($log, $message) = @_;
  Pipeline::update_stage_info($job_num, $stage_name, "error");
  $log->error($message);
  exit(1);
}

$log->info("Starting $stage_name on job: $job_num");

# update jobcache stage status
Pipeline::update_stage_info($job_num, $stage_name, "running");

my $job_dir = $Pipeline_Conf::global_job_dir."/".$job_num;
my $proc_dir = $job_dir."/proc";
my $run_dir = $proc_dir."/".$stage_id.".".$stage_name;
my $results_dir = $job_dir."/".$Pipeline_Conf::results_dir;
my $message = "";

# create directories
if(-d $run_dir){
  fail($log, "found $run_dir. please delete $job_num from AWE and remove $run_dir");
} 
mkdir($run_dir) or fail($log, "Could not mkdir: $run_dir, $!");

# run cmd
if ((-s $fasta_file) > $Pipeline_Conf::min_gene_size) {
  system("$runcmd -c add -i $job_num -f $fasta_file -o $results_dir/650.superblat.sims -p 5 -s 'release_sims_hold_recompute $job_num' &> $run_dir/AWEUtil.out") == 0 or fail($log, "loadAWE failed on job: $job_num, see $run_dir/AWEUtil.out for details.");
  $message = "Running AWE";
  # new sims calculated, add m5nr version to JobAttributes
  Pipeline::set_job_attributes($job_num, [['m5nr_sims_version', $Pipeline_Conf::ach_sequence_ver]]);
}

if ($gzipped){
  system("gzip $fasta_file") == 0 or fail($log, "gzip $fasta_file failed: $!");
}

$log->info("Finished $stage_name on job: $job_num");

# update jobcache stage status
Pipeline::update_stage_info($job_num, $stage_name, "completed");

exit(0);

