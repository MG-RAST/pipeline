#!/usr/bin/env perl 

use strict;
use warnings;
no warnings('once');

use Pipeline_recompute;
use Pipeline_Conf;

use Getopt::Long;
use File::Copy;
umask 000;

my $stage_name="sims_to_abundance";
my $stage;
for my $s (@{$Pipeline_Conf::pipeline->{'sims_to_abundance'}}) {
  $stage = $s if $s->{name} eq $stage_name; 
}
my $stage_id = $stage->{id};
my $revision = "0";
my $version  = $Pipeline_Conf::pipeline_version.".".$revision;

# options
my $job_num       = "";
my $fasta         = "";
my $aa_sims_file  = "";
my $rna_sims_file = "";
my $clust_aa      = "";
my $map_rna       = "";
my $ver_db        = 0;
my $procs         = 2;
my $mem_key       = $Pipeline_Conf::memcache_key;
my $max_seq       = 500000;
my $ver           = 0;
my $help          = 0;

my $options = GetOptions ("job=i"           => \$job_num,
                          "fasta=s"         => \$fasta,
			  "aa_sims_file=s"  => \$aa_sims_file,
			  "rna_sims_file=s" => \$rna_sims_file,
                          "clust_aa=s"      => \$clust_aa,
                          "map_rna=s"       => \$map_rna,
                          "nr_ver=s"        => \$ver_db,
			  "procs=i"         => \$procs,
			  "key_memcache=s"  => \$mem_key,
			  "version!"        => \$ver,
			  "help!"           => \$help
			 );
if ( $ver ) {
  print STDERR "$stage_name - $version - $stage_id\n";
  exit(0);
} elsif ( $help or !($job_num and $fasta and $aa_sims_file and $rna_sims_file and $clust_aa and $map_rna and $ver_db) ) {
  print STDERR "Usage: pipeline_$stage_name -j <job number> -f <fasta> -a <aa sims file> -r <rna sims file> -c <aa cluster file> -m <rna mapping file> --nr_ver <m5nr db version> [-k <memcache key> -p <# processors for sort, default $procs>]\n";
  exit(1);
}

my $log = Pipeline_recompute::logger($job_num);
$log->info("Starting $stage_name on job: $job_num");

foreach my $file ($aa_sims_file, $rna_sims_file, $clust_aa, $map_rna) {
  unless (-e $file) {
    $log->error("file: $file does not exist");
    exit(1);
  }

  if (-s $file == 0) {
    $log->error("file: $file is empty");
    exit(1);
  }
}

# update jobcache stage status
Pipeline_recompute::update_stage_info($job_num, $stage_name, "running");

my $job_dir     = $Pipeline_Conf::global_job_dir."/".$job_num;
my $proc_dir    = $job_dir."/proc";
my $stage_dir   = $proc_dir."/".$stage_id.".".$stage_name;
my $results_dir = $job_dir."/".$Pipeline_Conf::results_dir;
my $raw_dir     = $job_dir."/raw";
my $run_dir     = $stage_dir;
my $hostname    = `hostname`;
chomp $hostname;

# create directories
if (-d $stage_dir) {
  my $t = time;
  $log->info("found $stage_dir, moving to $stage_dir.$t");
  move($stage_dir, $stage_dir.".".$t) or fail($log, "$!");
}
mkdir($stage_dir) or fail($log, "Could not mkdir: $stage_dir, $!");

# set cluster workspace dir (use local if large job)
my $work_dir = (($procs >= 4) && (-d $Pipeline_Conf::local_workspace)) ? $Pipeline_Conf::local_workspace : $Pipeline_Conf::cluster_workspace;
if (-d $work_dir) {
  $run_dir = "$work_dir/$job_num.$stage_id.$stage_name";
  if (-d $run_dir) {
    system("rm -rf $run_dir");
  }
  mkdir($run_dir) or fail($log, "Could not mkdir: $run_dir, $!");
  system("echo $hostname > $stage_dir/hostname");
}
$log->info("Running on host $hostname, using dir $run_dir");

my $sort_dir = (-d $Pipeline_Conf::local_tmp) ? $Pipeline_Conf::local_tmp : ((-d $Pipeline_Conf::cluster_tmp) ? $Pipeline_Conf::cluster_tmp : $run_dir);
my $prefix   = $stage_id.".".$stage_name;
my $err_file = $stage_dir."/".$prefix.".err";
my $message  = "$stage_name failed on job: $job_num, see $err_file for details.";

# find out if this is an assembled dataset
#   This code was modified to look for an abundance file in $raw_dir as an indicator that
#   we're dealing with an assembled job.  This approach should only be used for recomputing.
#my $job_attribs = Pipeline::get_job_attributes($job_num);
#my $assembled = exists($job_attribs->{assembled}) ? $job_attribs->{assembled} : '';
#my $assembly_abun_opt = "";
#if ($assembled && $assembled == 1) {
#  $assembly_abun_opt = "--abun_file $raw_dir/$job_num.abundance";
#}
my $assembly_abun_opt = "";
if(-e "$raw_dir/$job_num.abundance") {
  $assembly_abun_opt = "--abun_file $raw_dir/$job_num.abundance";
}

system("sims_to_abundance --job_num $job_num --fasta $fasta --aa_sims_file $aa_sims_file --rna_sims_file $rna_sims_file --clust_aa $clust_aa --map_rna $map_rna --sort_dir $sort_dir --run_dir $run_dir --prefix $prefix --ver_db $ver_db --mem_host $Pipeline_Conf::memcache_host --mem_key $mem_key --procs $procs $assembly_abun_opt") == 0 or fail($log, "sims_to_abundance: ".$message);

# new annotations loaded, add version to JobAttributes
Pipeline_recompute::set_job_attributes($job_num, [['m5nr_annotation_version', $ver_db]]);
Pipeline_recompute::set_job_attributes($job_num, [['m5rna_annotation_version', $ver_db]]);

# move files / cleanup
move("$run_dir/$prefix.source.stats", "$results_dir/$prefix.source.stats") or fail($log, "Failed copy: $prefix.source.stats - $!");
move("$run_dir/$prefix.sims.filter.seq", "$results_dir/$prefix.sims.filter.seq") or fail($log, "Failed copy: $run_dir/$prefix.sims.filter.seq - $!");
system("mv $run_dir/*summary $results_dir/.");
chmod 0666, "$results_dir/$prefix.source.stats";
chmod 0666, "$results_dir/$prefix.sims.filter.seq";
chmod 0666, "$results_dir/*summary";

# move run_dir to stage_dir if on local
if ($run_dir ne $stage_dir) {
  system("mv $run_dir/*.out $stage_dir/.");
  system("mv $run_dir/*.err $stage_dir/.");
  system("rm -rf $run_dir") == 0 or fail($log, "$stage_name failed on job: $job_num, can not remove $run_dir");
} else {
  my @run_files = `ls $run_dir`;
  chomp @run_files;
  map { system("rm $run_dir/$_") } grep { $_ !~ /\.(out|err)$/ } @run_files;
}

$log->info("Finished $stage_name on job: $job_num");

# update jobcache stage status
Pipeline_recompute::update_stage_info($job_num, $stage_name, "completed");

exit(0);

sub fail {
  my ($log, $message) = @_;
  Pipeline_recompute::update_stage_info($job_num, $stage_name, "error");
  $log->error($message);
  if ($run_dir ne $stage_dir) {
    system("mv $run_dir/* $stage_dir/.");
    system("rmdir $run_dir");
  }
  exit(1);
}
