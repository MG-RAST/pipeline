#!/usr/bin/env perl 

#MG-RAST pipeline job downloader for AWE
#Command name: pipeline_download_from_awe
#Options:
#     -job_num=<MG-RAST job number, required>
#     -awe=<AWE server URL (ip:port), required>
#     -awe_job_id=<AWE assigned job ID, required>
#     
#      Operations:
#               1. check if job is complete
#               2. if job is complete, download files to analysis subdirectory in job directory
#               3. if job is not complete, return job state
#Note: if awe_url (ip:port) is configured in Pipeline_Conf.pm, then -awe is not needed. But the specified -awe will overwrite the Pipeline_Conf.pm variable.

use strict;
use warnings;
no warnings('once');

use JSON;
use Pipeline;
use Pipeline_Conf;
use Getopt::Long;
use LWP::UserAgent;
use Digest::MD5::File qw( file_md5_hex );
umask 000;

my $stage_name = "download_from_awe";
my $stage;
for my $s (@{$Pipeline_Conf::pipeline->{'awe_part_two'}}){
  $stage = $s if $s->{name} eq $stage_name;
}
my $stage_id = $stage->{id};

# options
my $job_num = "";
my $awe_url = "";
my $awe_job_id = "";
my $help = 0;

my $options = GetOptions ("job_num=i"     => \$job_num,
                          "awe=s"         => \$awe_url,
                          "awe_job_id=s"  => \$awe_job_id,
                          "h"  => \$help,
			 );

if ($help) {
    print_usage();
    exit 0;
}

if (length($job_num)==0) {
    print STDERR "ERROR: $stage_name failed, job_num was not specified.\n";
    print_usage();
    exit 1;
}

my $log = Pipeline::logger($job_num);
$log->info("Starting $stage_name on job: $job_num");

if (length($awe_url)==0) {
    if(defined $Pipeline_Conf::awe_url) {
        $awe_url = $Pipeline_Conf::awe_url;
    }
    if (length($awe_url)==0) {
        $log->error("$stage_name failed on job: $job_num, AWE server URL was not specified.");
        print_usage();
        exit(1);
    }
}

if (length($awe_job_id)==0) {
    $log->error("$stage_name failed on job: $job_num, AWE job ID was not specified.");
    print_usage();
    exit(1);
}

my $awe_job_url = "http://".$awe_url."/job/".$awe_job_id;

#retrieve job status from awe
$log->info("Retrieving job status for job #$job_num from AWE via url: $awe_job_url");

my $ua = LWP::UserAgent->new();
my $get = $ua->get($awe_job_url);
unless ($get->is_success) {
    $log->error("$stage_name failed on job: $job_num, could not retrieve AWE job via url: $awe_job_url");
    exit(1);
}
my $json = new JSON();
my $res = $json->decode( $get->content );

if($res->{data}->{state} ne "completed") {
    $log->error("$stage_name failed on job: $job_num, AWE job cannot be downloaded as it is in state: ".$res->{data}->{state});
    exit(1);
}

$log->info("SUCCESS, AWE job has completed without error and will now be downloaded.");

my %filename_to_shock_info = ();
my $awe_job_name = $res->{data}->{info}->{name};
foreach my $task (@{$res->{data}->{tasks}}) {
    foreach my $output (keys %{$task->{outputs}}) {
        my $filename = $output;
        $filename =~ s/^$awe_job_name\.(.*)/$1/;
        if(exists $filename_to_shock_info{$filename}) {
            $log->error("The output filename: $filename appears multiple times in the AWE workflow.");
            exit(1);
        } else {
            $filename_to_shock_info{$filename}{node} = $task->{outputs}->{$output}->{node};
            $filename_to_shock_info{$filename}{host} = $task->{outputs}->{$output}->{host};
        }
    }
}

foreach my $req_file ('100.preprocess.passed.fna', '100.preprocess.removed.fna', '150.dereplication.passed.fna',
                      '150.dereplication.removed.fna', '299.screen.passed.fna', '350.genecalling.coding.faa',
                      '350.genecalling.coding.fna', '425.search.rna.fna', '440.cluster.rna97.fna',
                      '440.cluster.rna97.mapping', '450.rna.sims', '550.cluster.aa90.faa',
                      '550.cluster.aa90.mapping', '650.superblat.sims', '700.annotation.function.summary',
                      '700.annotation.lca.summary', '700.annotation.md5.summary', '700.annotation.ontology.summary',
                      '700.annotation.organism.summary', '700.annotation.sims.filter.seq', '700.annotation.sims.stats',
                      '700.annotation.source.stats') {
    unless(exists $filename_to_shock_info{$req_file}) {
        $log->error("Required file: $req_file is missing from AWE job output.");
        exit(1);
    }

    my $node = $filename_to_shock_info{$req_file}{node};
    my $host = $filename_to_shock_info{$req_file}{host};
    my $shock_url = "$host/node/$node";

    my $shock_download_url = "$shock_url?download";
    my $get = $ua->get($shock_download_url);
    if ($get->is_success) {
        $log->info("Retrieving $req_file: ".length($get->decoded_content)." bytes of data.");
    } else {
        $log->error("Could not download $req_file via Shock url: $shock_download_url. Response error: " . $get->status_line);
        exit(1);
    }
 
    my $job_dir = $Pipeline_Conf::global_job_dir."/".$job_num;
    my $adir    = $job_dir."/analysis";
    my $saved_file = "$adir/$req_file";
    if($req_file eq '700.annotation.sims.filter.seq' || $req_file eq '700.annotation.source.stats') {
        my $tmp = $req_file;
        $tmp =~ s/^700\.annotation(.*)$/900.loadDB$1/;
        $saved_file = "$adir/$tmp";
    }
    unless(open OUT, '>' . $saved_file) {
        $log->error("Could not create and save file: '$saved_file'");
        exit(1);
    }
     
    binmode(OUT, ":utf8");
    print OUT $get->decoded_content;
    close OUT;
     
    $log->info("Saved file: $saved_file");

    my $md5 = file_md5_hex( $saved_file );
    my $shock_md5 = &get_shockfile_md5($shock_url);
    if($shock_md5 eq "") {
        $log->error("Could not retrieve md5 checksum from Shock url: $shock_url for file $saved_file");
        exit(1);
    } elsif($shock_md5 ne $md5) {
        $log->error("md5 checksum for downloaded file $saved_file did not match that in Shock ($shock_url)");
        exit(1);
    }
}

$log->info("Finished $stage_name on job: $job_num");

exit(0);

sub get_shockfile_md5 {
    my ($shock_url) = @_;
    my $ua = LWP::UserAgent->new();
    my $get = $ua->get($shock_url);
    unless ($get->is_success) {
        return "";
    }
    my $json = new JSON();
    my $res = $json->decode( $get->content );
    return $res->{data}->{file}->{checksum}->{md5};
}

sub print_usage {
    print "
MG-RAST pipeline job downloader for AWE
Command name: pipeline_download_from_awe
Options:
     -job_num=<MG-RAST job number, required>
     -awe=<AWE server URL (ip:port), required>
     -awe_job_id=<AWE assigned job ID, required>
     
      Operations:
               1. check if job is complete
               2. if job is complete, download files to analysis subdirectory in job directory
               3. if job is not complete, return job state
Note: if awe_url (ip:port) is configured in Pipeline_Conf.pm, then -awe is not needed. But the specified -awe will overwrite the Pipeline_Conf.pm variable.
\n";
}
