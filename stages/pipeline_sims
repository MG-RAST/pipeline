#!/usr/bin/env perl 

use strict;
use warnings;
no warnings('once');

use Pipeline;
use Pipeline_Conf;

use Getopt::Long;
use File::Copy;
use File::Basename;
use POSIX qw(strftime);
umask 000;

my $stage_name="sims";
my $stage;
for my $s (@{$Pipeline_Conf::pipeline->{'default'}}){
  $stage = $s if $s->{name} eq $stage_name;
}
my $stage_id = $stage->{id};
my $revision = "0";
my $version  = $Pipeline_Conf::pipeline_version.".".$revision;
my $params   = "--verbose --mem_host ".$Pipeline_Conf::memcache_host." --mem_key ".$Pipeline_Conf::memcache_key;

# options
my $job_num = "";
my $fasta   = "";
my $sims    = "";
my $ver     = "";
my $help    = "";
my $options = GetOptions ("job=i"    => \$job_num,
			  "fasta=s"  => \$fasta,
			  "sims:s"   => \$sims,
			  "version!" => \$ver,
			  "help!"    => \$help,
			 );

if ( $ver ) {
  print STDERR "$stage_name - $version - $stage_id\n";
  exit(0);
} elsif ( $help or !($job_num and $fasta) ) {
  print STDERR "Usage: pipeline_$stage_name -j <job number> -f <fasta file> [-s <sims file>]\n";
  exit(1);
} 

my $log = Pipeline::logger($job_num);

unless (-e $fasta) {
  $log->error("file: $fasta does not exist");
  exit(1);
}

$log->info("Starting $stage_name on job: $job_num");

# update jobcache stage status
Pipeline::update_stage_info($job_num, $stage_name, "running");

my $job_dir     = $Pipeline_Conf::global_job_dir."/".$job_num;
my $proc_dir    = $job_dir."/proc";
my $stage_dir   = $proc_dir."/".$stage_id.".".$stage_name;
my $results_dir = $job_dir."/".$Pipeline_Conf::results_dir;
my $run_dir     = $stage_dir;
my $hostname    = `hostname`;
chomp $hostname;

# create directories
if (-d $stage_dir) {
  my $t = time;
  $log->info("found $stage_dir, moving to $stage_dir.$t");
  move($stage_dir, $stage_dir.".".$t) or fail($log, "$!");
}
mkdir($stage_dir) or fail($log, "Could not mkdir: $stage_dir, $!");

# set cluster workspace dir
if (-d $Pipeline_Conf::cluster_workspace) {
  $run_dir = $Pipeline_Conf::cluster_workspace . "/$job_num.$stage_id.$stage_name";
  if (-d $run_dir) {
    system("rm -rf $run_dir");
  }
  mkdir($run_dir) or fail($log, "Could not mkdir: $run_dir, $!");
  system("echo $hostname > $stage_dir/hostname");
}
$log->info("Running on host $hostname, using dir $run_dir");

my $sort_dir = (-d $Pipeline_Conf::local_tmp) ? $Pipeline_Conf::local_tmp : ((-d $Pipeline_Conf::cluster_tmp) ? $Pipeline_Conf::cluster_tmp : $run_dir);
my $prefix   = $stage_id.".superblat";
my $err_file = $stage_dir."/".$prefix.".err";
my $message  = "$stage_name failed on job: $job_num, see $err_file for details.";

if ((-s $fasta) < $Pipeline_Conf::min_gene_size) {
  quit_sims($run_dir, $stage_dir, $job_num, $stage_id, $stage_name, "no genes called");
}

# get AWE results
my $sims_file = "$run_dir/$prefix.sims";
unless ($sims && (-e $sims)) {
  my $awe_results_dir = $Pipeline_Conf::AWEdata."/".$job_num.".results";
  unless (-d $awe_results_dir) {
    quit_sims($run_dir, $stage_dir, $job_num, $stage_id, $stage_name, "no AWE results");
  }
  system("cat $awe_results_dir/* > $sims_file") == 0 or fail($log, 'AWE cat: '.$message);
  unless (-s $sims_file) {
    quit_sims($run_dir, $stage_dir, $job_num, $stage_id, $stage_name, "no sims found");
  }
}
else {
  if ((-s $sims) < $Pipeline_Conf::min_gene_size) {
    quit_sims($run_dir, $stage_dir, $job_num, $stage_id, $stage_name, "no sims found");
  }
  #system("cp $sims $sims_file.pre") == 0 or fail($log, 'cp $sims: '.$message);
  #system("bleachsims -s $sims_file.pre -o $sims_file -c 3 -m 20 -r 0 > $run_dir/bleachsims.out 2> $err_file") == 0 or fail($log, 'bleachsims: '.$message);
  system("cp $sims $sims_file") == 0 or fail($log, 'cp $sims: '.$message);
}

# expand sims - AWE results should always be sorted by query id then bit score
system("process_sims_by_source_mem_db2 $params --in_sim $sims_file --out_filter $run_dir/$prefix.sims.filter --out_expand $run_dir/$prefix.expand.protein --out_ontology $run_dir/$prefix.expand.ontology --out_lca $run_dir/$prefix.expand.lca >> $run_dir/process_sims.out 2> $err_file") == 0 or fail($log, 'process_sims: '.$message);

# cleanup
move("$sims_file", "$results_dir/$prefix.sims") or fail($log, "Failed copy: $sims_file - $!");
move("$run_dir/$prefix.sims.filter", "$results_dir/$prefix.sims.filter") or fail($log, "Failed copy: $prefix.filter - $!");
move("$run_dir/$prefix.expand.protein", "$results_dir/$prefix.expand.protein") or fail($log, "Failed copy: $prefix.expand.protein - $!");
move("$run_dir/$prefix.expand.ontology", "$results_dir/$prefix.expand.ontology") or fail($log, "Failed copy: $prefix.expand.ontology - $!");
move("$run_dir/$prefix.expand.lca", "$results_dir/$prefix.expand.lca") or fail($log, "Failed copy: $prefix.expand.lca - $!");

chmod 0666, "$results_dir/$prefix.sims";
chmod 0666, "$results_dir/$prefix.sims.filter";
chmod 0666, "$results_dir/$prefix.expand.protein";
chmod 0666, "$results_dir/$prefix.expand.ontology";
chmod 0666, "$results_dir/$prefix.expand.lca";

# move run_dir to stage_dir if on local
if ($run_dir ne $stage_dir) {
  system("mv $run_dir/*.out $stage_dir/.");
  system("mv $run_dir/*.err $stage_dir/.");
  system("rm -rf $run_dir") == 0 or fail($log, "$stage_name failed on job: $job_num, can not remove $run_dir");
} else {
  my @run_files = `ls $run_dir`;
  chomp @run_files;
  map { system("rm $run_dir/$_") } grep { $_ !~ /\.(out|err)$/ } @run_files;
}

$log->info("Finished $stage_name on job: $job_num");

# update jobcache stage status
Pipeline::update_stage_info($job_num, $stage_name, "completed");

exit(0);

sub fail {
  my ($log, $message) = @_;
  Pipeline::update_stage_info($job_num, $stage_name, "error");
  $log->error($message);
  if ($run_dir ne $stage_dir) {
    system("mv $run_dir/* $stage_dir/.");
    system("rmdir $run_dir");
  }
  exit(1);
}

sub quit_sims {
  my ($run_dir, $stage_dir, $job_num, $stage_id, $stage_name, $msg) = @_;

  my $results_dir = $job_dir."/".$Pipeline_Conf::results_dir;
  my $prefix = $stage_id.".superblat";

  system("touch $results_dir/$prefix.sims");
  system("touch $results_dir/$prefix.sims.filter");
  system("touch $results_dir/$prefix.expand.protein");
  system("touch $results_dir/$prefix.expand.ontology");
  system("touch $results_dir/$prefix.expand.lca");
  chmod 0666, "$results_dir/$prefix.sims";
  chmod 0666, "$results_dir/$prefix.sims.filter";
  chmod 0666, "$results_dir/$prefix.expand.protein";
  chmod 0666, "$results_dir/$prefix.expand.ontology";
  chmod 0666, "$results_dir/$prefix.expand.lca";

  $log->info("Finished $stage_name on job: $job_num, empty results files: $msg");
  Pipeline::update_stage_info($job_num, $stage_name, "completed");
  exit(0);
}
