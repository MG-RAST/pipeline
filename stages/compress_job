#!/usr/bin/env perl 

use strict;
use warnings;
no warnings('once');

use Pipeline;
use Pipeline_Conf;

use Getopt::Long;
use File::Copy;
use File::Basename;
use Data::Dumper;
umask 000;

my $stage    = "compress_job";
my $revision = "0";
my $version  = $Pipeline_Conf::pipeline_version.".".$revision;

# options
my $job_num = "";
my $uncomp  = 0;
my $stages  = "";
my $ver     = "";
my $help    = "";
my $options = GetOptions ("job=i"       => \$job_num,
			  "stage:s"     => \$stages,
			  "uncompress!" => \$uncomp,
			  "version"     => \$ver,
			  "help"        => \$help
			 );

if ($ver) {
  print STDERR "$stage - $version\n";
  exit(0);
}
if ($help or (! $job_num)) {
  print STDERR "Usage: $stage -j <job number> [-u (bool: uncompress job) -s <comma-seperated list of stage ids>]\n";
  exit(1);
}

my $log = Pipeline::logger($job_num);

my @processed   = ();
my $job_dir     = $Pipeline_Conf::global_job_dir."/".$job_num;
my $raw_dir     = $job_dir."/raw";
my $results_dir = $job_dir."/".$Pipeline_Conf::results_dir;
my %to_compress = map { $_, 1 } @{ Pipeline::get_compress_suffixes() };

# get stage subset
my @stage_set = split(/,/, $stages);

# get file list
my @to_process = ();
my @raw_files  = glob "$raw_dir/*";
my @res_files  = glob "$results_dir/*";

# get process list
if (scalar(@stage_set) == 0) {
  @to_process = (@raw_files, @res_files);
}
else {
  if ( grep(/^raw$/, @stage_set) ) {
    push @to_process, @raw_files;
  }
  foreach my $sid (sort @stage_set) {
    my @stage_files = grep { $_ =~ /^$results_dir\/$sid/ } @res_files;
    push @to_process, @stage_files;
  }
}

# process files
foreach my $file (@to_process) {
  my ($base, $path, $suffix) = fileparse($file, qr/\.[^.]*/);
  $suffix =~ s/^\.//;

  if ($uncomp && ($suffix eq 'gz')) {
    system("gunzip $file") == 0 or fail($log, "failed to gunzip $file, job $job_num");
    push @processed, "$base";
  }
  elsif ((! $uncomp) && exists($to_compress{$suffix})) {
    system("gzip $file") == 0 or fail($log, "failed to gzip $file, job $job_num");
    push @processed, "$base.$suffix";
  }
}

my $action = $uncomp ? 'uncompressed' : 'compressed';
$log->info("Successfully $action the following files: ".join(",", @processed));
exit(0);

sub fail {
  my ($log, $message) = @_;
  $log->error($message);
  exit(1);
}
