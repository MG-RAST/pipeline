#!/usr/bin/env perl 

use strict;
use warnings;
no warnings('once');

use Pipeline;
use Pipeline_Conf;

use Getopt::Long;
use File::Copy;
use POSIX qw(strftime);
umask 000;

my $stage_name="genecalling";
my $stage;
for my $s (@{$Pipeline_Conf::pipeline->{'default'}}){
  $stage = $s if $s->{name} eq $stage_name; 
}
my $stage_id = $stage->{id};
my $revision = "0";
my $version  = $Pipeline_Conf::pipeline_version.".".$revision;
my $runcmd   = "parallel_FragGeneScan.py";

# options
my $job_num    = "";
my $fasta_file = "";
my $proc    = 8;
my $size    = 100;
my $type    = "454";
my $ver     = "";
my $help    = "";
my $options = GetOptions ("job=i"   => \$job_num,
			  "fasta=s" => \$fasta_file,
			  "proc:i"  => \$proc,
			  "size:i"  => \$size,
			  "type:s"  => \$type,
			  "version" => \$ver,
			  "help"    => \$help,
			 );

if ( $ver ) {
  print STDERR "pipeline_$stage_name - $version - $stage_id\n";
  exit(0);
} elsif ( $help or !($job_num and $fasta_file) ) {
  print STDERR "Usage: pipeline_$stage_name -j <job number> -f <fasta file> [-t <sequencing type> -p <process number, default 8> -s <split size in MB, default 100>]\n";
  exit(1);
} 

my $log = Pipeline::logger($job_num);

unless (-f $fasta_file) {
  $log->error("file: $fasta_file does not exist");
  exit(1);
}

$log->info("Starting $stage_name on job: $job_num");

# update jobcache stage status
Pipeline::update_stage_info($job_num, $stage_name, "running");

my $job_dir     = $Pipeline_Conf::global_job_dir."/".$job_num;
my $proc_dir    = $job_dir."/proc";
my $stage_dir   = $proc_dir."/".$stage_id.".".$stage_name;
my $results_dir = $job_dir."/".$Pipeline_Conf::results_dir;
my $run_dir     = $stage_dir;
my $hostname    = `hostname`;
chomp $hostname;

unless (-s $fasta_file) {
    $log->info("file:  $fasta_file is empty, skipping $stage_name");
    system("touch ".$results_dir."/".$stage_id.".".$stage_name.".info");
    system("touch ".$results_dir."/".$stage_id.".".$stage_name.".coding.faa");
    system("touch ".$results_dir."/".$stage_id.".".$stage_name.".coding.fna");
    chmod 0666, $results_dir."/".$stage_id.".".$stage_name.".info";
    chmod 0666, $results_dir."/".$stage_id.".".$stage_name.".coding.faa";
    chmod 0666, $results_dir."/".$stage_id.".".$stage_name.".coding.fna";
    $log->info("Finished $stage_name on job: $job_num");
    Pipeline::update_stage_info($job_num, $stage_name, "completed");
    exit(0);
}

# create directories
if (-d $stage_dir) {
  my $t = time;
  $log->info("found $stage_dir, moving to $stage_dir.$t");
  move($stage_dir, $stage_dir.".".$t) or fail($log, "$!");
}
mkdir($stage_dir) or fail($log, "Could not mkdir: $stage_dir, $!");

# set cluster workspace dir
if (-d $Pipeline_Conf::cluster_workspace) {
  $run_dir = $Pipeline_Conf::cluster_workspace . "/$job_num.$stage_id.$stage_name";
  if (-d $run_dir) {
    system("rm -rf $run_dir");
  }
  mkdir($run_dir) or fail($log, "Could not mkdir: $run_dir, $!");
  system("echo $hostname > $stage_dir/hostname");
}
$log->info("Running on host $hostname, using dir $run_dir");

my %types = (sanger => 'sanger_10', 454 => '454_30', illumina => 'illumina_10', complete => "complete");
my $input_fasta = $stage_id.".".$stage_name.".input.fna";

# run cmd
system("cp $fasta_file $run_dir/$input_fasta >> $run_dir/$runcmd.out 2>&1") == 0 or fail($log, "Genecalling failed on job: $job_num, see $run_dir/$runcmd.out for details.");
system("$runcmd -v -p $proc -s $size -t $types{$type} -d $run_dir $run_dir/$input_fasta $run_dir/$job_num >> $run_dir/$runcmd.out 2>&1") == 0 or fail($log, "Genecalling failed on job: $job_num, see $run_dir/$runcmd.out for details.");
system("seqUtil --stdfasta -i $run_dir/$job_num.faa -o $run_dir/$job_num.clean.faa");

# copy output to somewhere
move($run_dir."/".$job_num.".clean.faa", $results_dir."/".$stage_id.".".$stage_name.".coding.faa") or fail($log, "Failed copy: coding.faa - $!");
move($run_dir."/".$job_num.".ffn", $results_dir."/".$stage_id.".".$stage_name.".coding.fna") or fail($log, "Failed copy: coding.fna - $!");

if ($run_dir ne $stage_dir) {
  move("$run_dir/$runcmd.out", "$stage_dir/$runcmd.out") or fail($log, "Failed copy file: $runcmd.out - $!");
  system("rm -rf $run_dir") == 0 or fail($log, "$stage_name failed on job: $job_num, can not remove $run_dir");
} else {
  my @run_files = `ls $run_dir`;
  chomp @run_files;
  map { system("rm $run_dir/$_") } grep { $_ !~ /\.out$/ } @run_files;
}

open(INFO, ">".$results_dir."/".$stage_id.".".$stage_name.".info");
print INFO "# MG-RAST - ".$stage_name." v".$version." - (".(strftime "%b %e %Y", localtime).")\n";
print INFO "# site : metagenomics.anl.gov\n# email: mg-rast\@mcs.anl.gov\n";
print INFO $runcmd." -p $proc -s $size -t $types{$type}\n";
close(INFO);

chmod 0666, $results_dir."/".$stage_id.".".$stage_name.".info";
chmod 0666, $results_dir."/".$stage_id.".".$stage_name.".coding.faa"; 
chmod 0666, $results_dir."/".$stage_id.".".$stage_name.".coding.fna"; 

$log->info("Finished $stage_name on job: $job_num");

# update jobcache stage status
Pipeline::update_stage_info($job_num, $stage_name, "completed");
exit(0);

sub fail {
  my ($log, $message) = @_;
  Pipeline::update_stage_info($job_num, $stage_name, "error");
  $log->error($message);
  if ($run_dir ne $stage_dir) {
    system("mv $run_dir/* $stage_dir/.");
    system("rmdir $run_dir");
  }
  exit(1);
}
