#!/usr/bin/env perl 

use strict;
use warnings;
no warnings('once');

use Pipeline;
use Pipeline_Conf;

use Getopt::Long;
use File::Copy;
umask 000;

my $stage_name="annotation";
my $stage_id = 700;
my $revision = "0";
my $version  = $Pipeline_Conf::pipeline_version.".".$revision;

# options
my %opts = ();
GetOptions( \%opts, "job_num=i",
                    "fasta=s",
                    "aa_sims_file=s",
                    "rna_sims_file=s",
                    "clust_aa=s",
                    "map_rna=s",
                    "nr_ver=s",
                    "procs=i",
                    "sort_mem=i",
                    "key_memcache=s",
                    "host_memcache=s",
                    "version!",
                    "help!" );

my $job_num       = $opts{job_num};
my $fasta         = $opts{fasta};
my $aa_sims_file  = (exists $opts{aa_sims_file}) ? $opts{aa_sims_file} : "";
my $rna_sims_file = (exists $opts{rna_sims_file}) ? $opts{rna_sims_file} : "";
my $clust_aa      = (exists $opts{clust_aa}) ? $opts{clust_aa} : "";
my $map_rna       = (exists $opts{map_rna}) ? $opts{map_rna} : "";
my $ver_db        = $opts{nr_ver};
my $procs         = (exists $opts{procs}) ? $opts{procs} : 4;
my $sort_mem      = (exists $opts{sort_mem}) ? $opts{sort_mem} : 10;
my $mem_key       = (exists $opts{key_memcache}) ? $opts{key_memcache} : $Pipeline_Conf::memcache_key;
my $mem_host      = (exists $opts{host_memcache}) ? $opts{host_memcache} : $Pipeline_Conf::memcache_host;

if ( exists $opts{version} ) {
  print STDERR "$stage_name - $version - $stage_id\n";
  exit(0);
} elsif ( exists $opts{help} or !($job_num and $fasta and $ver_db) ) {
  print STDERR "Usage: pipeline_$stage_name -j <job number> -f <fasta> -a <aa sims file> -r <rna sims file> -c <aa cluster file> -m <rna mapping file> --nr_ver <m5nr db version> [--host_memcache <memcache host> -k <memcache key> -s <sort memory in GB> -p <# processors for sort, default $procs>]\n";
  exit(1);
}

my $log = Pipeline::logger($job_num);
$log->info("Starting $stage_name on job: $job_num");

unless(($aa_sims_file && (-s $aa_sims_file)) ||
       ($rna_sims_file && (-s $rna_sims_file))) {
  $log->error("Must input at least one sims file that is not empty.");
  exit(1);
}

my $input_file_str = "";
foreach my $opt ('fasta', 'aa_sims_file', 'rna_sims_file', 'clust_aa', 'map_rna') {
  if(exists $opts{$opt}) {
    my $file_name = $opts{$opt};
    unless (-e $file_name) {
      $log->error("Input file '$file_name' does not exist.");
      exit(1);
    }
    unless (-s $file_name) {
      $log->error("Input file '$file_name' is empty.");
      exit(1);
    }
    if($opt eq 'fasta') {
      $input_file_str .= "--fasta $fasta ";
    } elsif($opt eq 'aa_sims_file') {
      $input_file_str .= "--aa_sims_file $aa_sims_file ";
    } elsif($opt eq 'rna_sims_file') {
      $input_file_str .= "--rna_sims_file $rna_sims_file ";
    } elsif($opt eq 'clust_aa') {
      $input_file_str .= "--clust_aa $clust_aa ";
    } elsif($opt eq 'map_rna') {
      $input_file_str .= "--map_rna $map_rna ";
    }
  }
}

# update jobcache stage status
Pipeline::update_stage_info($job_num, $stage_name, "running");

my $job_dir     = $Pipeline_Conf::global_job_dir."/".$job_num;
my $proc_dir    = $job_dir."/proc";
my $stage_dir   = $proc_dir."/".$stage_id.".".$stage_name;
my $results_dir = $job_dir."/".$Pipeline_Conf::results_dir;
my $raw_dir     = $job_dir."/raw";
my $run_dir     = $stage_dir;
my $hostname    = `hostname`;
chomp $hostname;

# create directories
if (-d $stage_dir) {
  my $t = time;
  $log->info("found $stage_dir, moving to $stage_dir.$t");
  move($stage_dir, $stage_dir.".".$t) or fail($log, "$!");
}
mkdir($stage_dir) or fail($log, "Could not mkdir: $stage_dir, $!");

# set cluster workspace dir (use local if large job)
my $work_dir = (($procs >= 4) && (-d $Pipeline_Conf::local_workspace)) ? $Pipeline_Conf::local_workspace : $Pipeline_Conf::cluster_workspace;
print "work_dir = $work_dir\n";
if (-d $work_dir) {
  $run_dir = "$work_dir/$job_num.$stage_id.$stage_name";
  if (-d $run_dir) {
    system("rm -rf $run_dir");
  }
  mkdir($run_dir) or fail($log, "Could not mkdir: $run_dir, $!");
  system("echo $hostname > $stage_dir/hostname");
}
$log->info("Running on host $hostname, using dir $run_dir");

my $sort_dir = (-d $Pipeline_Conf::local_tmp) ? $Pipeline_Conf::local_tmp : ((-d $Pipeline_Conf::cluster_tmp) ? $Pipeline_Conf::cluster_tmp : $run_dir);
my $prefix   = $stage_id.".".$stage_name;
my $err_file = $stage_dir."/".$prefix.".err";
my $message  = "$stage_name failed on job: $job_num, see $err_file for details.";

# find out if this is an assembled dataset
#   This code was modified to look for an abundance file in $raw_dir as an indicator that
#   we're dealing with an assembled job.  This approach should only be used for recomputing.
#my $job_attribs = Pipeline::get_job_attributes($job_num);
#my $assembled = exists($job_attribs->{assembled}) ? $job_attribs->{assembled} : '';
#my $assembly_abun_opt = "";
#if ($assembled && $assembled == 1) {
#  $assembly_abun_opt = "--abun_file $raw_dir/$job_num.abundance";
#}
my $assembly_abun_opt = "";
if(-e "$raw_dir/$job_num.abundance") {
  $assembly_abun_opt = "--abun_file $raw_dir/$job_num.abundance";
}

system("sims2annotation --job_num $job_num $input_file_str --sort_dir $sort_dir --run_dir $run_dir --prefix $prefix --ver_db $ver_db --mem_host $mem_host --mem_key $mem_key --sort_mem $sort_mem --procs $procs $assembly_abun_opt") == 0 or fail($log, "sims2annotation: ".$message);

# move files / cleanup
move("$run_dir/$prefix.source.stats", "$results_dir/$prefix.source.stats") or fail($log, "Failed copy: $prefix.source.stats - $!");
move("$run_dir/$prefix.sims.filter.seq", "$results_dir/$prefix.sims.filter.seq") or fail($log, "Failed copy: $run_dir/$prefix.sims.filter.seq - $!");
system("mv $run_dir/*summary $results_dir/.");
chmod 0666, "$results_dir/$prefix.source.stats";
chmod 0666, "$results_dir/$prefix.sims.filter.seq";
chmod 0666, "$results_dir/*summary";

# move run_dir to stage_dir if on local
if ($run_dir ne $stage_dir) {
  system("mv $run_dir/*.out $stage_dir/.");
  system("mv $run_dir/*.err $stage_dir/.");
  system("rm -rf $run_dir") == 0 or fail($log, "$stage_name failed on job: $job_num, can not remove $run_dir");
} else {
  my @run_files = `ls $run_dir`;
  chomp @run_files;
  map { system("rm $run_dir/$_") } grep { $_ !~ /\.(out|err)$/ } @run_files;
}

$log->info("Finished $stage_name on job: $job_num");

# update jobcache stage status
Pipeline::update_stage_info($job_num, $stage_name, "completed");

exit(0);

sub fail {
  my ($log, $message) = @_;
  Pipeline::update_stage_info($job_num, $stage_name, "error");
  $log->error($message);
  if ($run_dir ne $stage_dir) {
    system("mv $run_dir/* $stage_dir/.");
    system("rmdir $run_dir");
  }
  exit(1);
}
