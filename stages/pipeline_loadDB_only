#!/usr/bin/env perl 

use strict;
use warnings;
no warnings('once');

use Pipeline;
use Pipeline_Conf;

use Getopt::Long;
use File::Copy;
umask 000;

my $stage_name="loadDB";
my $stage_id = 900;
my $revision = "0";
my $version  = $Pipeline_Conf::pipeline_version.".".$revision;

# options
my $job_num      = "";
my $fasta        = "";
my $db_reload    = 0;
my $annot_db_ver = $Pipeline_Conf::ach_annotation_ver;
my $sims_db_ver  = $Pipeline_Conf::ach_sequence_ver;
my $ver          = "";
my $help         = "";
my $options      = GetOptions ("job=i" => \$job_num,
                               "db_reload!" => \$db_reload,
                               "annot_db_ver=s" => \$annot_db_ver,
                               "sims_db_ver=s" => \$sims_db_ver,
                               "version!" => \$ver,
                               "help!" => \$help
                              );

my $usage = "Usage: $0 -j <job number> [-d (boolean:reload db) --annot_db_ver <annotation db version> --sims_db_ver <sims db version>]\nNOTE: No individual summary file is required, but at least one is required to run this script.";

if ( $ver ) {
  print STDERR "$stage_name - $version\n";
  exit(0);
} elsif ( $help or !($job_num )) {
  print STDERR "$usage\n";
  exit(1);
}

my $job_dir                = $Pipeline_Conf::global_job_dir."/".$job_num;
my $raw_dir                = $job_dir."/raw";
my $proc_dir               = $job_dir."/proc";
my $stage_dir              = $proc_dir."/".$stage_id.".".$stage_name;
my $results_dir            = $job_dir."/".$Pipeline_Conf::results_dir;
my $params                 = "--verbose --seq-db-version ".$annot_db_ver;
my $dboptions              = "--dbhost ".$Pipeline_Conf::analysis_host." --dbname ".$Pipeline_Conf::analysis_db." --dbuser ".$Pipeline_Conf::analysis_user." --dbtable_range ".$Pipeline_Conf::analysis_db_table_range;
my $hostname                = `hostname`;
chomp $hostname;

# get merged files
my @info_set     = ( ['md5', 1],
                     ['function', 6],
                     ['organism', 7],
                     ['ontology', 7],
                     ['lca', 6] );

my $summary_file_options = "";
my %pluralize = ( 'md5' => 'md5s', 'function' => 'functions', 'organism' => 'organisms', 'ontology' => 'ontologies', 'lca' => 'lcas' );
foreach my $info (@info_set) {
  my ($type, $pos) = @$info;
  my $filename = "$results_dir/700.annotation.$type.summary";
  if(-e $filename) {
    $summary_file_options .= "--$pluralize{$type}_filename $filename ";
  }
}

if($summary_file_options eq "") {
  print STDERR "ERROR: None of the summary files exist.\n";
  print STDERR "$usage\n";
  exit(1);
}

my $log = Pipeline::logger($job_num);
$log->info("Starting $stage_name on job: $job_num");

# update jobcache stage status
Pipeline::update_stage_info($job_num, $stage_name, "running");

# create directories
if (-d $stage_dir) {
  my $t = time;
  $log->info("found $stage_dir, moving to $stage_dir.$t");
  move($stage_dir, $stage_dir.".".$t) or fail($log, "$!");
}
mkdir($stage_dir) or fail($log, "Could not mkdir: $stage_dir, $!");

system("echo $hostname > $stage_dir/hostname");
$log->info("Running on host $hostname, using dir $stage_dir");

my $prefix   = $stage_id.".".$stage_name;
my $err_file = $stage_dir."/".$prefix.".err";
my $message  = "$stage_name failed on job: $job_num, see $err_file for details.";

my $reload = "";
if ($db_reload) {
  $reload = "--reload";
  $log->info("running in db reload mode");
}

my $outf = "$stage_dir/run_load_summary.out";
system("load_summary2db $params $dboptions $summary_file_options $reload --job $job_num >> $outf 2> $err_file") == 0 or fail($log, "load_summary2db ".$message);

# new annotations loaded, add version to JobAttributes
Pipeline::set_job_attributes($job_num, [['m5nr_sims_version', $sims_db_ver]]);
Pipeline::set_job_attributes($job_num, [['m5rna_sims_version', $sims_db_ver]]);
Pipeline::set_job_attributes($job_num, [['m5nr_annotation_version', $annot_db_ver]]);
Pipeline::set_job_attributes($job_num, [['m5rna_annotation_version', $annot_db_ver]]);

# update jobcache stage status
Pipeline::update_stage_info($job_num, $stage_name, "completed");

$log->info("Finished $stage_name on job: $job_num");

exit(0);

sub fail {
  my ($log, $message) = @_;
  Pipeline::update_stage_info($job_num, $stage_name, "error");
  $log->error($message);
  exit(1);
}
