#!/usr/bin/env perl 

use strict;
use warnings;
no warnings('once');

use Pipeline;
use Pipeline_Conf;

use Getopt::Long;
use File::Copy;
umask 000;

my $stage_name="rna";
my $stage;
for my $s (@{$Pipeline_Conf::pipeline->{'default'}}) {
  $stage = $s if $s->{name} eq $stage_name; 
}
my $stage_id = $stage->{id};
my $revision = "0";
my $version  = $Pipeline_Conf::pipeline_version.".".$revision;
my $default_nr = $Pipeline_Conf::md5rna_full;

# options
my $job_num = "";
my $fasta   = "";
my $rna_nr  = "";
my $sims    = "";
my $mem_key = $Pipeline_Conf::memcache_key;
my $procs   = 2;
my $ver     = 0;
my $help    = 0;
my $options = GetOptions ("job=i"     => \$job_num,
			  "fasta=s"   => \$fasta,
			  "rna_nr=s"  => \$rna_nr,
			  "sims:s"    => \$sims,
			  "procs:i"   => \$procs,
			  "mem_key:s" => \$mem_key,
			  "version!"  => \$ver,
			  "help!"     => \$help,
			 );
if ( $ver ) {
  print STDERR "$stage_name - $version - $stage_id\n";
  exit(0);
} elsif ( $help or !($job_num and $fasta and $rna_nr) ) {
  print STDERR "Usage: pipeline_$stage_name -j <job number> -f <fasta file> -r <rna NR> [-s <sims file> -m <memcache key> -p <# processors for sort, default $procs>]\n";
  exit(1);
}

my $log = Pipeline::logger($job_num);
$log->info("Starting $stage_name on job: $job_num");

unless ($rna_nr && (-e $rna_nr)) {
  $rna_nr = $default_nr;
  $log->info("changing rna_nr to $default_nr");
}
unless ((-e $fasta) && (-e $rna_nr)) {
  $log->error("file: $fasta or $rna_nr does not exist");
  exit(1);
}

# update jobcache stage status
Pipeline::update_stage_info($job_num, $stage_name, "running");

my $job_dir     = $Pipeline_Conf::global_job_dir."/".$job_num;
my $proc_dir    = $job_dir."/proc";
my $stage_dir   = $proc_dir."/".$stage_id.".".$stage_name;
my $results_dir = $job_dir."/".$Pipeline_Conf::results_dir;
my $run_dir     = $stage_dir;
my $hostname    = `hostname`;
chomp $hostname;

# create directories
if (-d $stage_dir) {
  my $t = time;
  $log->info("found $stage_dir, moving to $stage_dir.$t");
  move($stage_dir, $stage_dir.".".$t) or fail($log, "$!");
}
mkdir($stage_dir) or fail($log, "Could not mkdir: $stage_dir, $!");

# set cluster workspace dir (use local if large job)
my $work_dir = (($procs >= 4) && (-d $Pipeline_Conf::local_workspace)) ? $Pipeline_Conf::local_workspace : $Pipeline_Conf::cluster_workspace;
if (-d $work_dir) {
  $run_dir = "$work_dir/$job_num.$stage_id.$stage_name";
  if (-d $run_dir) {
    system("rm -rf $run_dir");
  }
  mkdir($run_dir) or fail($log, "Could not mkdir: $run_dir, $!");
  system("echo $hostname > $stage_dir/hostname");
}
$log->info("Running on host $hostname, using dir $run_dir");

my $sort_dir = (-d $Pipeline_Conf::local_tmp) ? $Pipeline_Conf::local_tmp : ((-d $Pipeline_Conf::cluster_tmp) ? $Pipeline_Conf::cluster_tmp : $run_dir);
my $prefix   = $stage_id.".".$stage_name;
my $err_file = $stage_dir."/".$prefix.".err";
my $message  = "$stage_name failed on job: $job_num, see $err_file for details.";

# run blat / bleach
my $fasta_file = "$run_dir/$prefix.fna";
my $sims_file  = "$run_dir/$prefix.sims";
unless ($sims && (-s $sims)) {
  system("cp $fasta $fasta_file") == 0 or fail($log, "cp $fasta: ".$message);
  system("blat -out=blast8 -t=dna -q=dna -fastMap $rna_nr $fasta_file stdout | bleachsims -s - -o $sims_file -r 0 > $run_dir/blat.out 2> $err_file") == 0 or fail($log, "blat: ".$message);
  unless (-s $sims_file) {
    quit_rna($run_dir, $stage_dir, $job_num, $stage_id, $stage_name, "no blat results");
  }
  # new sims calculated, add m5rna version to JobAttributes
  Pipeline::set_job_attributes($job_num, [['m5rna_sims_version', $Pipeline_Conf::ach_sequence_ver]]);
}
else {
  system("cp $sims $sims_file") == 0 or fail($log, 'cp $sims: '.$message);
}

# expand sims
my $sort_mem = int($procs * 1024 * 2.5);
my $params   = "--verbose --mem_host ".$Pipeline_Conf::memcache_host." --mem_key ".$mem_key;
system("/soft/packages/coreutils/8.13/alias/sort -T $sort_dir -S ${sort_mem}M -t \$'\\t' -k 1,1 -k 12,12nr -o $sims_file.sort $sims_file >> $run_dir/process_sims.out 2> $err_file") == 0 or fail($log, "sort sim: ".$message);
system("process_sims_by_source_mem_db2 $params --in_sim $sims_file.sort --out_filter $sims_file.filter --out_rna $run_dir/$prefix.expand.rna --out_lca $run_dir/$prefix.expand.lca >> $run_dir/process_sims.out 2> $err_file") == 0 or fail($log, 'process_sims: '.$message);

# cleanup
move("$sims_file.sort", "$results_dir/$prefix.sims") or fail($log, "Failed copy: $prefix.sims.sort - $!");
move("$sims_file.filter", "$results_dir/$prefix.sims.filter") or fail($log, "Failed copy: $prefix.sims.filter - $!");
move("$run_dir/$prefix.expand.rna", "$results_dir/$prefix.expand.rna") or fail($log, "Failed copy: $prefix.expand.rna - $!");
move("$run_dir/$prefix.expand.lca", "$results_dir/$prefix.expand.lca") or fail($log, "Failed copy: $prefix.expand.lca - $!");

chmod 0666, "$results_dir/$prefix.sims"; 
chmod 0666, "$results_dir/$prefix.sims.filter";
chmod 0666, "$results_dir/$prefix.expand.rna";
chmod 0666, "$results_dir/$prefix.expand.lca";

# move run_dir to stage_dir if on local
if ($run_dir ne $stage_dir) {
  system("mv $run_dir/*.out $stage_dir/.");
  system("mv $run_dir/*.err $stage_dir/.");
  system("rm -rf $run_dir") == 0 or fail($log, "$stage_name failed on job: $job_num, can not remove $run_dir");
} else {
  my @run_files = `ls $run_dir`;
  chomp @run_files;
  map { system("rm $run_dir/$_") } grep { $_ !~ /\.(out|err)$/ } @run_files;
}

$log->info("Finished $stage_name on job: $job_num");

# update jobcache stage status
Pipeline::update_stage_info($job_num, $stage_name, "completed");

exit(0);

sub fail {
  my ($log, $message) = @_;
  Pipeline::update_stage_info($job_num, $stage_name, "error");
  $log->error($message);
  if ($run_dir ne $stage_dir) {
    system("mv $run_dir/* $stage_dir/.");
    system("rmdir $run_dir");
  }
  exit(1);
}

sub quit_rna {
  my ($run_dir, $stage_dir, $job_num, $stage_id, $stage_name, $msg) = @_;

  my $results_dir = $job_dir."/".$Pipeline_Conf::results_dir;
  my $prefix = $stage_id.".".$stage_name;

  system("touch $results_dir/$prefix.sims");
  system("touch $results_dir/$prefix.sims.filter");
  system("touch $results_dir/$prefix.expand.rna");
  system("touch $results_dir/$prefix.expand.lca");
  chmod 0666, "$results_dir/$prefix.sims";
  chmod 0666, "$results_dir/$prefix.sims.filter";
  chmod 0666, "$results_dir/$prefix.expand.rna";
  chmod 0666, "$results_dir/$prefix.expand.lca";

  if ($run_dir ne $stage_dir) {
    system("mv $run_dir/* $stage_dir/.");
    system("rmdir $run_dir");
  }

  $log->info("Finished $stage_name on job: $job_num, empty results files: $msg");
  Pipeline::update_stage_info($job_num, $stage_name, "completed");
  exit(0);
}
