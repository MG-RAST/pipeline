#!/usr/bin/env perl 

use strict;
use warnings;
no warnings('once');

use Pipeline;
use Pipeline_Conf;

use Getopt::Long;
use File::Copy;
use File::Basename;
umask 000;

my $stage_name = "redo_simseq";
my $stage_id = "900";
my $params   = "--verbose --mem_host ".$Pipeline_Conf::memcache_host." --mem_key ".$Pipeline_Conf::memcache_key;
my $ver_db   = $Pipeline_Conf::ach_annotation_ver;

# options
my $job_num = "";
my $help    = 0;
my $options = GetOptions ( "job=i" => \$job_num, "help!" => \$help );
if ( $help || (! $job_num) ) {
  print STDERR "Usage: pipeline_$stage_name -j <job number>\n";
  exit(1);
}

my $log = Pipeline::logger($job_num);
$log->info("Starting $stage_name on job: $job_num");

my $job_dir     = $Pipeline_Conf::global_job_dir."/".$job_num;
my $results_dir = $job_dir."/".$Pipeline_Conf::results_dir;
my $seq_file    = $results_dir."/900.loadDB.sims.filter.seq";

# index filter seqs
system("index_sims_file_md5 $params --in_file $seq_file --out_file $seq_file.index") == 0 or fail($log, "index_sims_file_md5: failed for job $job_num");

my $dbh = DBI->connect("DBI:Pg:dbname=$Pipeline_Conf::analysis_db;host=$Pipeline_Conf::analysis_host", $Pipeline_Conf::analysis_user, '', {AutoCommit => 0 , RaiseError => 1});
unless ($dbh) { fail($log, "Error: ".DBI->errstr."\n"); }

# update DB
open(SEQFILE, "<$seq_file.index") or fail($log, "Parsing $seq_file.index failed: Can't open file: $!\n");
while (my $line = <SEQFILE>) {
    chomp $line;
    my ($md5, $seek, $length) = split(/\t/, $line);
    $dbh->do("UPDATE job_md5s SET seek = $seek, length = $length WHERE version = $ver_db AND job = $job_num");
}
close SEQFILE;

# cleanup
system("rm $seq_file.index");
$log->info("Finished $stage_name on job: $job_num");

exit(0);

sub fail {
  my ($log, $message) = @_;
  $log->error($message);
  exit(1);
}
